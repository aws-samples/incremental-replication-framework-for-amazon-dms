AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Aurora Postgres 13.8"

Parameters:
  
  VPCID:
    Type: 'AWS::EC2::VPC::Id'
    Description: "ID of the VPC you are deploying Aurora into."
  
  Subnet1ID:
    Type: 'AWS::EC2::Subnet::Id'
    Description: The ID of the private subnet in Availability Zone 1.
  
  Subnet2ID:
    Type: 'AWS::EC2::Subnet::Id'
    Description: The ID of the private subnet in Availability Zone 2.

Resources:
  
  RDSSecurityGroup:
    Properties:
      GroupDescription: "Allow access to database port"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      VpcId: !Ref VPCID
    Type: "AWS::EC2::SecurityGroup"
  
  RDSSecurityGroupIngress:
    Properties:
      GroupId: !GetAtt 'RDSSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref RDSSecurityGroup
      Description: 'Self Reference'
    Type: 'AWS::EC2::SecurityGroupIngress'
  
  EncryptionKey:
    DeletionPolicy: Delete
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                "kms:CallerAccount": !Ref AWS::AccountId
                "kms:ViaService": !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
  
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey
  
  DBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub "Aurora PG Database Instance Parameter Group for Cloudformation Stack ${AWS::StackName}"
      Family: aurora-postgresql13
      Parameters:
        log_rotation_age: '1440'
        log_rotation_size: '102400'
        shared_preload_libraries: 'pg_stat_statements,pglogical'
  
  AuroraDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: "Subnets available for the Amazon Aurora database instance"
      SubnetIds:
       - !Ref Subnet1ID
       - !Ref Subnet2ID
    Type: "AWS::RDS::DBSubnetGroup"

  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "Aurora PG Cluster Parameter Group for Cloudformation Stack ${AWS::StackName}"
      Family: aurora-postgresql13
      Parameters:
        rds.force_ssl: 0
        rds.logical_replication: 1
        wal_sender_timeout: 60000
        max_logical_replication_workers: 2
        autovacuum_max_workers: 1
        max_parallel_workers: 4
        shared_preload_libraries: 'pg_stat_statements,pglogical'
  
  AuroraDBCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      BackupRetentionPeriod: 35
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref AuroraDBSubnetGroup
      DatabaseName: postgresdb
      Engine: aurora-postgresql
      EngineVersion: 13.8
      KmsKeyId: !GetAtt EncryptionKey.Arn
      MasterUserPassword: Admin123#
      MasterUsername: dbadmin
      Port: 5432
      StorageEncrypted: true
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 16
        MinCapacity: 0.5
      VpcSecurityGroupIds: 
        - !Ref RDSSecurityGroup
      EnableHttpEndpoint: true
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  AuroraDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref AuroraDBCluster

  AuroraCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-credentials-secret
      KmsKeyId: !GetAtt EncryptionKey.Arn
      SecretString: !Sub '{"username": "dbadmin", "password": "Admin123#", "host": "${AuroraDBCluster.Endpoint.Address}", "port": "5432"}'

Outputs:
  
  DBEngine:
    Description: "Database engine"
    Value: aurora-postgres
  
  DBName:
    Description: "Amazon Aurora database name"
    Value: postgresdb
  
  DBMasterUsername:
    Description: "Amazon Aurora database master username"
    Value: dbadmin

  DBMasterPassword:
    Description: "Amazon Aurora database master password"
    Value: Admin123#
  
  RDSEndPointAddress:
    Description: "Amazon Aurora write endpoint"
    Value: !Sub ${AuroraDBCluster.Endpoint.Address}
  
  RDSEndPointPort:
    Description: "Amazon Aurora endpoint port"
    Value: 5432
  
  RDSEncryptionKeyId:
    Description: The id of the encryption key created for RDS
    Value: !Ref EncryptionKey

  AuroraCredentialsSecret:
    Description: The secret with database credentials
    Value: !Ref AuroraCredentialsSecret